function [fcst,true,rms,anc]= find_pnf(x,noise,niter,lstart,lend,smoo,iglue,lead,eps,NPH,iic,nlim) 
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 
% Written by Dmitri Kondrashov and Mickael Chekroun, UCLA, Feb 25, 2013
% Email: dkondras@atmos.ucla.edu, mchekroun@atmos.ucla.edu
% Exclusive use for ONR-N00014-12-1-0911 project
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% [fcst,true,rms,anc]= find_pnf(x,noise,niter,lstart,lend,smoo,iglue,lead,eps,NPH,iic,nlim) 
% 2-VARIABLE TOY MODEL FOR PROOF-OF-CONCEPT TEST OF PAST NOISE FORECASTING (PNF) STRATEGY 
% see Supplementary Information of Chekroun, Kondrashov and Ghil (2011), PNAS
%
%  INPUT : x - time series generated by the model; 
%          noise - time series of model's driving noise that generated "x"
%          lstart,lend -  start and end of validation interval 
%          iglue - switch for PNF (iglue=1), OR pure random forecasts (iglue=0)
%          niter - number of random forecasts (used only for iglue=0), set as [] oherwise 
%          smoo - oscillatory component(s) of time series "x" by Singualr Spectrum Analysis (SSA) 
%          lead - prediction lead
%
%%%%%%%%%%% PNF-only input arguments (when iglue=1) %%%%%%%%%%%%%%%%%%%%% 
%          eps - accuracy (in radians) to find past occurences of current (at the time of forecast) phase of "smoo".
%          NPH - maximum size of PNF ensemble selected by phase
%          iic - set iic=1 to refine selected by phase PNF ensemble using  
%                closest (nlim) initial conditions of raw data "X" at the time of forecast;  
%                set iic=0 do not refine
%          nlim - final size of PNF ensemble after i.c. refinement. 
% OUTPUT: fcst,true - prediction and truth time series in validation interval
%         rms,anc - prediction skill 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



	ndt = 1;
	dt=1;
	nlevel=1;

	Nt=size(x,1);
	
	data0=x;

	eps0=eps;
	
	data = data0(1:lstart,:);
	[length npc] = size(data);	
	nmax=npc;

	lim=6;
	nout=npc;
	      	
	yy = zeros(nmax,nlevel);
	x_mean=zeros(nmax,nlevel);
	xp=zeros(lead+1,1);
	yp=zeros(lead+1,1);

	range=0;

	ldat = lend - lstart +1;
	ltot = lend+lead;


	true = zeros(ldat,lead,nout);
	fcst = zeros(ldat,lead,nout);

%%%%%%%%%SETUP PNF%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%	

if iglue~=0

tlength=size(noise,1);

  disp(['USING PHASE-BASED PNF ENSEMBLE']);
   
  if iic ~= 0 

  disp(['REFINED BY INITIAL CONDITIONS TO HAVE ' num2str(nlim) ' MEMBERS ']);
	
   else 

   end

%%%%%RESHUFFLE THE HISTORY OF THE DRIVING NOISE TO CANCEL PNF EFFECT%%%%%%%
%for n=1:nmax
%noise(:,n)=noise(randperm(tlength),n);%%%
%end
%%%%%% CREATE VERY LARGE ENSEMBLE OF ALL POSSIBLE SNIPPETS OF DRIVING NOISE %%%%%%%%%%%
%%%%%% FROM THE PAST HISTORY (array "dWens") %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

[slice]=gluenoise2(noise(1:length,:),lead,0);
												 
[n1,n2,nens]=size(slice);
dWens=zeros(lead,nmax,nens);
												  
for n=1:nens
dWens(:,:,n)=slice(:,:,n);
end
												  
niter=nens;

%%%PERFORM HILBERT TRANSFORM OF SSA's OSCILLATORY COMPONENT(S) TO FIND%%%%%
%%% TIME HISTORY OF OSCIL. PHASE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

[ND,NS]=size(smoo);
phi=zeros(ND,NS);
for ns=1:NS
[phi(:,ns)]=hilbssa(smoo(:,ns));
end
												  
end

%%%%%%%DONE WITH PNF SETUP%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

fsurr = NaN*zeros(1,lead,nout,niter);
indbest = NaN*zeros(ldat,niter);

%%%%%START TIME LOOP IN VALIDATION INTERVAL%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

for ll=lstart:lend 

%%% INDEX OF THE POINT AT THE START OF THE FORECAST %%%%%%%%%%%%%%%%%%%%%%%

lc=ll;

lpt = lc-lstart+1;

xs = zeros(lead,nmax);									

%%% SETUP INITIAL CONDITIONS AT THE START OF THE FORECAST%%%%%%%%%%%%%%%%%%%

for nl=1:nlevel
for n=1:nmax
xinit(n,nl)=data0(ll,n);
%xinit(n,nl)=x(n,ll,nl);
end
end
							
it=0;
iter = 0;
clear fpcs;
clear indstar;

%%%USE PNF TO SELECT OPTIMAL NOISE SNIPPETS FOR DRIVING PREDICTION MODEL

if iglue~=0
 
%%%CURRENT PHASE OF OSCIL. COMPONENT(S) AT THE START TIME OF FORECAST%%%%%

phase=phi(lc,:); 


%%%%FIND ENSEMBLE OF INDICES OF SIMILAR PHASE IN THE PAST HISTORY %%%%%%%%%
%%%%% AND STORE IT IN "indstar" ARRAY %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	
%eps = eps0;
for eps=eps0:-0.0005:0.0005%%

indstar1=NaN*zeros(lstart-lead,NS);
for ns=1:NS
indtmp=phasyn(phase(ns),phi(1:lstart-lead,ns),eps);
indstar1(1:size(indtmp,1),ns)=indtmp;
end

%%%%%%Here for ns > 1 finding intersection of different phase sets%%%%%%%%

indtmp=find(~isnan(indstar1(:,1)));
indstar=indstar1(indtmp,1);

for ns=2:NS
indtmp=find(~isnan(indstar1(:,ns)));
indstartmp=indstar1(indtmp,ns);
indstar=intersect(indstar,indstartmp);
end            

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

indstar=indstar';
nsize=size(indstar,2);

%%%%%%%%%%BREAK when the size of phase ENSEMBLE reached the target  %%%%%%%%%

if nsize < NPH
break;
end												  

end

%%%%DONE WITH INDICES OF SIMILAR PHASE IN THE PAST HISTORY %%%%%%%%%%%%%%%
%%%%REFINE PHASE ENSEMBLE BY USING CLOSEST INITIAL CONDITIONS in "x" %%%%%%%

if iic == 1 

%%%nlim=20;%%SIZE OF REFINED ENSEMBLE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

ic=NaN*zeros(size(indstar,2),1);

%%%%%COMPUTE DIFFERENCE in INITIAL CONDITIONS for 2nd COMPONENT of "x"%%%%

for i=1:size(indstar,2)
ic(i)=abs(data0(lc,2)-data0(indstar(i),2)); 
end

[tmpmtr1,ir]=sort(ic,'ascend');
indstar=indstar(ir(1:min(nlim,size(indstar,2))));


end 

%%%DONE WUTH REFINING BY INITIAL CONDITIONS  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

indbest(lpt,1:size(indstar,2))=indstar;
niter = size(indstar,2);

end 

%%%DONE WITH IDENTIFYING INDICES OF NOISE SNIPPETS BY PNF %%%%%%%%%%%%%%%%%%

while it ~= niter

%%%LOOP OVER PNF ENSEMBLE, OR PURE RANDOM ENSEMBLE OF DRIVING NOISE %%%%%%%%
%%%TO GENERATE ENSEMBLE PREDICTION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

iter = iter+1;

%%% FOR PNF, GET THE NEXT SNIPPET HERE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

if iglue~=0
if iter <=niter & indstar(iter) <=nens
dW=dWens(:,:,indstar(iter));
else 
break;
end
										  
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
xp=zeros(lead+1,1);
yp=zeros(lead+1,1);

xp(1)=xinit(1);          
yp(1)=xinit(2); 

for nl=1:nlevel

for n=1:nmax
yy(n,nl)=xinit(n,nl);
end

end   

k=0;

%%%%PERFORM PREDICTION FOR "LEAD" TIME STEPS INTO THE FUTURE %%%%%%%%%%%%%%%%%%%%%
for l=1:lead

n=1;

%%%% FOR NON-PNF, DRIVING NOISE IS ARBITRARY SEQUENCE OF WHITE NOISE%%%%%%%%%%%%%%
if iglue == 0

x_mean(n,nlevel)=randn;

else 
%%%% FOR PNF, DRIVING NOISE IS SNIPPET IN PNF ENSEMBLE FROM THE PAST HISTORY%%%%%

x_mean(n,nlevel)=dW(l,n);

end

%%%%ADVANCE MODEL BY ONE TIME STEP %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

[xp(l+1),yp(l+1)] = pnftoy(ll+l-1,xp(l),yp(l),x_mean(1,1));

yy(1,1)=xp(l+1);
yy(2,1)=yp(l+1);

%%%%%DO SOME SANITY CHECKS (NOT REALLY NEEDED HERE, JUST A GOOD HABIT%%%%%
							
if isnan(yy(1,1))==1 
fprintf('%d %d %f\n',it,iter);									
range=1;
break; 
end;

[ymax imax] = max(abs(yy(:,1)));

if ymax > lim
%fprintf('Outside range= %f %d %d \n',ymax,it,imax);
range=1;
break;
end;
							
%%%%%%%%SAVE PREDICTION AT GIVEN LEAD %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
							
if l> 0
k=k+1;
for n=1:nmax   
xs(k,n) = yy(n,1);
end
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
end  %% END OF PREDICTION 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
							
%%% STORE COMPUTED PREDICTION FOR GIVEN ENSEMBLE MEMBER%%%%%%%%%%%% %%%%%%%%%
							
if range==0 
it=it+1;
fsurr(1,:,:,it)=xs(:,1:nout);
else 
%it=it+1;
end %%% end if
range=0;
end  
%% END OF ENSEMBLE LOOP OVER DRIVING NOISE%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% OUTPUT PROGRESS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
							
if(mod(ll-1,10)==0)
disp(['Current time step: ' num2str(lpt) ' ; Total:  ' num2str(ldat) ' ; ENSEMBLE SIZE: ' num2str(iter)]);
%fprintf('%d %d %f\n',lpt,iter,eps);
end

fpcs = squeeze(fsurr(1,:,:,:));
true(lpt,:,:)=data0(lc+1:lc+lead,1:nout);
fcst(lpt,:,:)=nanmean(fpcs,3);

end  

%% END OF TIME LOOP OVER VALIDATION INTERVAL %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% COMPUTE PREDICTION SKILL                  %%%%%%%%%%%%
							
anc = zeros(lead,nout);
rms = zeros(lead,nout);
ance = zeros(lead,nout,niter);
rmse = zeros(lead,nout,niter);
stdt= squeeze(std(true));
							
for j=1:nout
for i=1:lead
rms(i,j)=sqrt(sum((fcst(:,i,j)-true(:,i,j)).^2)/ldat)/stdt(i,j);
anc(i,j)=xcorr(center(fcst(:,i,j)),center(true(:,i,j)),0,'coeff');
end
end

return
